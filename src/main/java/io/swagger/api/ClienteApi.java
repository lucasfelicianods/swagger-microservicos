/**
 * NOTE: This class is auto generated by the swagger code generator program (2.4.1).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.Cliente;
import io.swagger.model.Clientes;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2019-02-04T01:05:49.011Z")

@Api(value = "cliente", description = "the cliente API")
public interface ClienteApi {

    @ApiOperation(value = "Altera um cliente existente", nickname = "alteraExistente", notes = "Esta operacao tem por objetivo alterar um cliente existente.", response = Cliente.class, tags={ "Manuntencao", })
    @ApiResponses(value = { 
        @ApiResponse(code = 202, message = "Cliente alterado com sucesso!", response = Cliente.class),
        @ApiResponse(code = 400, message = "Alteração invalida!"),
        @ApiResponse(code = 401, message = "Alteração não autorizada"),
        @ApiResponse(code = 500, message = "Erro interno ao tentar realizar a alteração") })
    @RequestMapping(value = "/cliente/{id}",
        produces = { "application/json" }, 
        consumes = { "applivation/json" },
        method = RequestMethod.PUT)
    ResponseEntity<Cliente> alteraExistente(@ApiParam(value = "id do cliente.",required=true) @PathVariable("id") Integer id,@ApiParam(value = "" ,required=true )  @Valid @RequestBody Cliente cliente);


    @ApiOperation(value = "Alteração de status de cliente por id.", nickname = "alterarStatusPorId", notes = "Esta operação tem por objetivo alterar o status de um cliente passando um id como parametro.", response = Cliente.class, tags={ "Manuntencao", })
    @ApiResponses(value = { 
        @ApiResponse(code = 202, message = "Sucesso ao alterar o status de um cliente existente.", response = Cliente.class),
        @ApiResponse(code = 400, message = "Alteração de status invalida"),
        @ApiResponse(code = 401, message = "Alteração de status não autorizada"),
        @ApiResponse(code = 500, message = "Erro interno ao tentar alterar o status.") })
    @RequestMapping(value = "/cliente/{status}/{id}",
        produces = { "application/json" }, 
        consumes = { "applivation/json" },
        method = RequestMethod.PUT)
    ResponseEntity<Cliente> alterarStatusPorId(@ApiParam(value = "Status do cliente.",required=true, allowableValues = "\"ativo\", \"inativo\"") @PathVariable("status") String status,@ApiParam(value = "Numero do Id do cliente.",required=true) @PathVariable("id") Integer id);


    @ApiOperation(value = "Cadastro de um novo cliente.", nickname = "casdastraNovo", notes = "Esta operacao tem por objetivo cadastrar um novo cliente", response = Cliente.class, tags={ "Cadastro", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Cliente cadastrado com sucesso!", response = Cliente.class),
        @ApiResponse(code = 400, message = "Cadastro Invalida."),
        @ApiResponse(code = 401, message = "Cadastro não autorizada."),
        @ApiResponse(code = 500, message = "Erro interno ao realizar o cadastro.") })
    @RequestMapping(value = "/cliente",
        produces = { "application/json" }, 
        consumes = { "applivation/json" },
        method = RequestMethod.POST)
    ResponseEntity<Cliente> casdastraNovo(@ApiParam(value = "" ,required=true )  @Valid @RequestBody Cliente cliente);


    @ApiOperation(value = "Consulta do cliente existente por id.", nickname = "consultaPorId", notes = "Esta consulta tem por objetivo consultar o cliente existente por id.", response = Cliente.class, tags={ "Consulta", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Sucesso ao consultar um cliente existente por Id.", response = Cliente.class),
        @ApiResponse(code = 400, message = "Consulta Invalida."),
        @ApiResponse(code = 401, message = "Consulta não autorizada."),
        @ApiResponse(code = 404, message = "Nenhum cliente encontrado para a consulta por id."),
        @ApiResponse(code = 500, message = "Erro interno ao tentar realizar a consulta por id.") })
    @RequestMapping(value = "/cliente/{id}",
        produces = { "application/json" }, 
        consumes = { "applivation/json" },
        method = RequestMethod.GET)
    ResponseEntity<Cliente> consultaPorId(@ApiParam(value = "Numero do Id do cliente consultado.",required=true) @PathVariable("id") Integer id);


    @ApiOperation(value = "Consulta Cliente existente por sobrenome.", nickname = "consultaPorSobrenome", notes = "Esta operação tem por objetivo consulta um cliente existente por sobrenome.", response = Cliente.class, tags={ "Consulta", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Sucesso ao consulta o cliente por sobrenome.", response = Clientes.class),
        @ApiResponse(code = 400, message = "Consulta Invalida."),
        @ApiResponse(code = 401, message = "Consulta não autorizada."),
        @ApiResponse(code = 404, message = "Nenhum cliente encontrado para a pesquisa."),
        @ApiResponse(code = 500, message = "Erro interno ao tentar realizar a consulta por sobrenome") })
    @RequestMapping(value = "/cliente/consulta/{sobrenome}",
        produces = { "application/json" }, 
        consumes = { "applivation/json" },
        method = RequestMethod.GET)
    ResponseEntity<Clientes> consultaPorSobrenome(@ApiParam(value = "Sobrenome do Cliente.",required=true) @PathVariable("sobrenome") String sobrenome);


    @ApiOperation(value = "Exclui  um cliente existente.", nickname = "excluiExiste", notes = "Esta operação tem por objetivo ecluir um cliente existente", tags={ "Exclusao", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Sucesso ao excluir um cliente existente."),
        @ApiResponse(code = 400, message = "Exclusão invalida."),
        @ApiResponse(code = 401, message = "Exclusao não autorizada."),
        @ApiResponse(code = 500, message = "Erro interno ao tentar realiza a exclusão") })
    @RequestMapping(value = "/cliente/{id}",
        produces = { "application/json" }, 
        consumes = { "applivation/json" },
        method = RequestMethod.DELETE)
    ResponseEntity<Void> excluiExiste(@ApiParam(value = "Numero do Id do cliente.",required=true) @PathVariable("id") Integer id);

}
